Development Plan: WooCommerce Product Section (Modern Implementation)
This document outlines the front-end development plan for the main product content area. The goal is to create a responsive, maintainable, and accessible layout using modern CSS best practices.
A. Core Principles & Best Practices
Approximated Sizing: All px values mentioned are for reference based on a 1920x1080 screenshot and serve only as a proportional guide. Do not use static pixel values in the final code.
Responsive Units: Use relative units for all sizing, spacing, and typography.
rem: The primary unit for font-size, padding, margin, and component dimensions (width/height). This ensures the layout scales correctly with user-defined browser font-size settings for better accessibility.
% / fr: Use for creating the fluid columns of the main layout within CSS Grid or Flexbox.
Layout Engine:
CSS Grid should be used for the main two-column page structure (images on the left, details on the right).
Flexbox should be used for aligning smaller, inner components like the pricing details, color swatches, and size selection buttons.
Mobile-First Approach: All base CSS should target mobile devices. Use min-width media queries to progressively enhance the layout for tablets and desktops.
B. Main Product Section Layout
Structure: Create a main container element that wraps the product section. Give it a max-width (e.g., 90rem or 1440px) and center it horizontally on the page. Inside, set up a two-column layout.
CSS Grid Implementation:
code
CSS
.product-main-container {
    display: grid;
    grid-template-columns: 1fr 1fr; /* Creates two equal-width, fluid columns */
    gap: 3rem; /* Defines the space between the columns */
    padding: 2rem; /* Inner spacing for the container */
}

/* Media query to stack columns on smaller screens */
@media (max-width: 768px) {
    .product-main-container {
        grid-template-columns: 1fr; /* Single column layout */
    }
}
1. Left Column: Product Image Gallery
This column will contain the standard WooCommerce product gallery. Ensure all images within it are styled with max-width: 100% and height: auto to make them responsive within the grid column.
2. Right Column: Product Details & Actions
This column should be a flex container with its children arranged vertically to ensure consistent spacing.
code
CSS
.product-details-column {
    display: flex;
    flex-direction: column;
    gap: 1.5rem; /* Consistent vertical spacing between all elements */
}
Product Title & Code: Standard WooCommerce elements. Style them with appropriate typography (e.g., font-size: 2rem for the title).
Color Selection (Grouped Products/Variations):
Functionality: Use your theme's built-in functionality for product variations to handle color options. Each color should be a separate variation in WooCommerce.
Styling: Render the variations as clickable image swatches. The currently selected swatch must have a distinct visual state (e.g., a solid 2px black border).
Size Selection (Product Attributes):
Attributes: This will be implemented using a WooCommerce product attribute. The required attribute slugs are select-size and size-selection.
Visual Style:
Render the size options as rounded buttons.
The attribute term ("36", "37", "S", "M", etc.) must be centered inside each button.
Out-of-Stock State: Any size that is unavailable must be visually disabled. It should be grayed out with the text having a line-through. The cursor should be not-allowed on hover.
CSS Implementation:
code
CSS
.size-selector-button {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 3rem;
    height: 3rem;
    border: 1px solid #ccc;
    border-radius: 50%; /* Creates a perfect circle */
    cursor: pointer;
    transition: all 0.2s ease;
}

.size-selector-button.selected {
    background-color: #000;
    color: #fff;
    border-color: #000;
}

.size-selector-button.out-of-stock {
    background-color: #f5f5f5;
    color: #b0b0b0;
    text-decoration: line-through;
    cursor: not-allowed;
    pointer-events: none; /* Disables click events */
    border-color: #e0e0e0;
}
C. Clothing Size Label Transformation
For clothing products, the full attribute terms must be converted to abbreviations on the front end. This can be achieved via a PHP filter in your theme's functions.php file or with JavaScript.
Required Mapping:
Original Attribute Term	Display As
XSmall/Small	XS/S
One Size	OS
XSmall	XS
Small	S
Medium	M
Large	L
XLarge	XL
XXLarge	XXL
XXXLarge	XXXL
Small/Medium	S/M
Medium/Large	M/L
Large/XLarge	L/XL